spring:
  application:
    name: backend  # 애플리케이션의 이름을 'backend'로 설정.

  h2:
    console:
      enabled: 'true'    # H2 데이터베이스의 웹 콘솔을 활성화.
      path: /h2-console  # H2 콘솔에 접근할 수 있는 경로를 '/h2-console'로 설정.

  datasource:
    url: jdbc:h2:./db_dev;MODE=MySQL  # H2 데이터베이스의 URL을 설정. 파일 기반 데이터베이스를 사용하며, MySQL 모드로 실행.
    driverClassName: org.h2.Driver    # H2 데이터베이스 드라이버 클래스를 지정.
    username: sa                      # 데이터베이스 접속 사용자 이름 설정.
    password:                         # 데이터베이스 접속 비밀번호 설정.

  jpa:
    hibernate:
      ddl-auto: update                            # 데이터베이스 스키마 자동 생성 전략을 'update'로 설정. 기존 테이블은 유지하고 변경사항만 적용함.
    properties:
      hibernate:
        show_sql: true                            # SQL 쿼리를 콘솔에 출력.
        format_sql: true                          # 출력되는 SQL 쿼리를 보기 좋게 포맷팅.
        dialect: org.hibernate.dialect.H2Dialect  # H2 데이터베이스에 맞는 Hibernate 방언(Dialect)을 설정.


  security:
    oauth2:
      client:
        registration:  # registration은 외부 서비스에서 우리 서비스를 특정하기 위해 등록하는 정보여서 등록이 필수적.
          naver:
            client-name: naver
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope: name,email,profile_image
          google:
            client-name: google
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/login/oauth2/code/google
            authorization-grant-type: authorization_code
            scope: profile,email
          kakao:
            client-name: kakao
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope: profile_nickname,profile_image
        provider:  # provider의 경우 서비스별로 정해진 값이 존재하며, 유명한 서비스의 경우 OAuth2 클라이언트 의존성이 내부적으로 데이터를 가지고 있음. (구글, Okta, 페이스북, 깃허브, 등등)
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id